<style lang="less" scoped>
.wrapper {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
  overflow: hidden;
}
.content_wrapper {
  width: 100%;
  background-color: white;
  margin-top: 10rpx;
  padding-top: 10rpx;
  padding-left: 50rpx;
  padding-bottom: 20rpx;
  overflow: hidden;
  textarea {
    font-size: 30rpx;
  }
  .image_container {
    display: flex;
    align-items: center;
    // justify-content: space-between;
    flex-wrap: wrap;
    .image_btn {
      width: 211rpx;
      height: 211rpx;
      margin-top: -18rpx;
      // margin-left: 20rpx;
      border: 6rpx solid #eee;
      display: flex;
      justify-content: center;
      align-items: center;
      image {
        width: 40%;
        height: 40%;
      }
    }
    .image_item {
      width: 223rpx;
      height: 223rpx;
      margin-right: 20rpx;
      margin-bottom: 20rpx;
      position: relative;
      .image {
        width: 100%;
        height: 100%;
      }
      .delete_btn {
        width: 60rpx;
        height: 60rpx;
        position: absolute;
        top: 15rpx;
        right: 15rpx;
        z-index: 99;
      }
    }
    .image_item:nth-child(3n) {
      margin-right: 0;
    }
  }
}

._picker {
  width: 100%;
  position: relative;
  margin-top: 20rpx;
  // padding: 10rpx;
  padding-top: 15rpx;
  padding-left: 50rpx;
  padding-bottom: 15rpx;
  background-color: white;
  display: flex;
  align-items: center;
  font-size: 30rpx;
  color: #999;
  .picker {
    margin-right: 280rpx;
    color: black;
  }
  .date_text {
    // float: right;
    margin-right: 30rpx;
  }
  .location_picker {
    color: black;
  }
  .location {
    position: absolute;
    right: 40rpx;
  }
}
.footer_btn {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 130rpx;
  background-color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  .upload_btn {
    width: 90%;
    height: 100rpx;
    border-radius: 18rpx;
    background-color: #fd92b0;
    text-align: center;
    line-height: 100rpx;
    font-size: 45rpx;
    color: white;
    letter-spacing: 6rpx;
    transition: all 0.1s ease-in;
    &:active {
      background-color: #fd92b062;
    }
  }
}
</style>

<template>
    <view class="wrapper">
        <view class="content_wrapper">
            <textarea class="text" @blur="handleInput"  value="{{form.content}}" placeholder="写下你想说的吧（选填）"></textarea>
            <view class="image_container">
                <block wx:if="{{images.length>0}}" wx:for="{{images}}" wx:key="{{index}}">
                    <view class="image_item">
                        <image
                            class="image"
                            src="{{item}}"
                            mode="aspectFil"
                            @tap="previewImage(index)"
                        >
                        <image
                            class="delete_btn"
                            src="../../assests/images/delete.png"
                            @tap="deleteImage(index)"
                        >
                    </view>
                </block>
                <view class="image_btn" @tap="chooseImage" wx:if="{{images.length <9}}">
                    <image src="../../assests/images/plus.png" mode="aspectFit">
                </view>
            </view>
        </view>
        <view class="_picker">
            <view class="picker">发生时间:</view>
            <picker class="date_picker" mode="date" value="{{form.date}}" bindchange="bindDateChange">
                <view class="date_text">{{form.date}}</view>
            </picker>
            <picker class="time_picker" mode="time" value="{{form.time}}" bindchange="bindTimeChange">
                <view class="date_text">{{form.time}}</view>
            </picker>
        </view>
        <view class="_picker" @tap="handleChooseLocation">
            <view class="location_picker">所在位置：</view>
            <view class="location">{{form.location}}</view>
        </view>
        <view class="footer_btn">
            <view class="upload_btn" @tap="submit">确认上传</view>
            <!-- <button>上传</button> -->
        </view>
    </view>
</template>

<script>
import wepy from 'wepy';
import dayjs from 'dayjs';
const qiniuUploader = require("../../plugins/qiniuUploader.js");
import regeneratorRuntime from '../../regenerator-runtime/runtime.js';

export default class Write extends wepy.page {
  config = {
    navigationBarTitleText: '上传'
  };

  customData = {}; // 自定义数据

  customFunction() {} //自定义方法

  onLoad() {

  } // 在Page和Component共用的生命周期函数

  onShow() {
    console.log(this.$parent.globalData)

    let resukt =  dayjs(new Date()).format('YYYY-MM-DD HH:mm:ss')
    console.log(resukt)
  } // 只在Page中存在的页面生命周期函数

  config = {}; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    form: {
    content: '',
    imagesUrl: [],
    date: dayjs(new Date()).format('YYYY-MM-DD'),
    time: dayjs(new Date()).format('HH:mm'),
    location: '',
    },
    images: [],
    imgNum: 0
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  computed = {

  }; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    handleInput(e){
        this.form.content = e.detail.value
    },
    chooseImage() {
      let self = this;
      self.imgNum++;
      wx.chooseMessageFile({
        count: 9,
        type: 'image',
        // sizeType: ['original', 'compressed'],
        // sourceType: ['album', 'camera'],
        success: function(res) {
            console.log(res)
            res.tempFiles.map((item,index)=>{
            qiniuUploader.upload(item.path, (res) => {
            console.log('file url is: ' + res.fileUrl);
            self.images = self.images.concat(item.path);
            self.form.imagesUrl = self.form.imagesUrl.concat(res.fileUrl)
            self.imgNum--;
            self.$apply()
            }, (error) => {
            console.log('error: ' + error);
            }, {
            region: 'SCN',
            domain: 'cdn.mitty.work', // // bucket 域名，下载资源时用到。如果设置，会在 success callback 的 res 参数加上可以直接使用的 ImageURL 字段。否则需要自己拼接
            key: item.name, // [非必须]自定义文件 key。如果不设置，默认为使用微信小程序 API 的临时文件名
            uptoken: self.$parent.globalData.token, // 由其他程序生成七牛 uptoken
            }, (res) => {
                console.log('上传进度', res.progress)
                console.log('已经上传的数据长度', res.totalBytesSent)
                console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
            }, () => {
            // 取消上传
            }, () => {
            // `before` 上传前执行的操作
            }, (err) => {
            // `complete` 上传接受后执行的操作(无论成功还是失败都执行)
            });
            })
        },
        complete: function(e) {}
      });
    },
    previewImage(index) {
      wx.previewImage({
        current: this.images[index], //当前预览的图片
        urls: this.images //所有要预览的图片
      });
    },
    deleteImage(index) {
      this.images.splice(index, 1);
      this.form.imagesUrl.splice(index, 1);
    },
    bindDateChange(e) {
      this.form.date = e.detail.value;
      this.$apply();
    },
    bindTimeChange(e) {
      this.form.time = e.detail.value;
      this.$apply();
    },
    handleChooseLocation() {
      let self = this;
      wx.chooseLocation({
        success: function(res) {
          console.log(res);
          if (res.address == '') {
            wx.showToast({
              title: '要选择一个位置唷',
              icon: 'none'
            });
            return;
          }
          self.form.location = res.address.substr(3);
          self.$apply();
        }
      });
    },
    async submit(){
        if(this.imgNum!=0){
            wx.showToast({
                icon: 'none',
                title: '稍等下'
            })
            return null
        }
        console.log(this.form)
        await wx.request({
        url: 'http://www.mitty.work:3001/uploadMShare', // 仅为示例，并非真实的接口地址
        method: 'GET',
        header: {
          'content-type': 'application/json' // 默认值
        },
        success(res) {
            console.log(res.data)
            if(res.data.code == 0) {
              self.dataList = res.data.list
              self.$apply()
            }else {
              wx.showToast({
                icon: 'none',
                title: res.data.msg
              })
            }
          }
        });

    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>